/**
 * generated by Xtext 2.12.0
 */
package org.ulm.metaulm.xtext.ui.outline;

import org.eclipse.emf.common.util.EList;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.ulm.metaulm.xtext.ulmDsl2.Attribute;
import org.ulm.metaulm.xtext.ulmDsl2.Context;
import org.ulm.metaulm.xtext.ulmDsl2.Entity;
import org.ulm.metaulm.xtext.ulmDsl2.Feature;
import org.ulm.metaulm.xtext.ulmDsl2.Lookup;
import org.ulm.metaulm.xtext.ulmDsl2.LookupIntValue;
import org.ulm.metaulm.xtext.ulmDsl2.LookupStringValue;

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
@SuppressWarnings("all")
public class UlmDsl2OutlineTreeProvider extends DefaultOutlineTreeProvider {
  public boolean _isLeaf(final Attribute a) {
    return true;
  }
  
  public boolean _isLeaf(final LookupIntValue liv) {
    return true;
  }
  
  public boolean _isLeaf(final LookupStringValue lsv) {
    return true;
  }
  
  public boolean _isLeaf(final Feature f) {
    return true;
  }
  
  public void _createChildren(final IOutlineNode parentNode, final Context contextElement) {
    final AbstractOutlineNode gan = new AbstractOutlineNode(parentNode, ((Image) null), "Attributes", false) {
    };
    EList<Attribute> _attributes = contextElement.getAttributes();
    for (final Attribute g : _attributes) {
      this.createNode(gan, g);
    }
    final AbstractOutlineNode gbn = new AbstractOutlineNode(parentNode, ((Image) null), "Lookups", false) {
    };
    EList<Lookup> _lookups = contextElement.getLookups();
    for (final Lookup g_1 : _lookups) {
      this.createNode(gbn, g_1);
    }
    final AbstractOutlineNode gcn = new AbstractOutlineNode(parentNode, ((Image) null), "Entities", false) {
    };
    EList<Entity> _entities = contextElement.getEntities();
    for (final Entity g_2 : _entities) {
      this.createNode(gcn, g_2);
    }
  }
}
