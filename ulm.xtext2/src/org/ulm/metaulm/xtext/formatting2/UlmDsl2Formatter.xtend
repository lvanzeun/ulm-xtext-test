/*
 * generated by Xtext 2.12.0
 */
package org.ulm.metaulm.xtext.formatting2

import com.google.inject.Inject
import org.ulm.metaulm.xtext.services.UlmDsl2GrammarAccess
import org.ulm.metaulm.xtext.ulmDsl2.Attribute
import org.ulm.metaulm.xtext.ulmDsl2.Context
import org.ulm.metaulm.xtext.ulmDsl2.Entity
import org.ulm.metaulm.xtext.ulmDsl2.Lookup
import org.ulm.metaulm.xtext.ulmDsl2.Model
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class UlmDsl2Formatter extends AbstractFormatter2 {
	
	@Inject extension UlmDsl2GrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		
		interior (
			model.regionFor.keyword("{"),
			model.regionFor.keyword("}")
		)[indent]
		
		model.regionFor.keyword("{").append[newLine]
		model.regionFor.keyword("}").prepend[newLine]

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Context context : model.getContexts()) {
			context.format;
		}
	}

	def dispatch void format(Context context, extension IFormattableDocument document) {
		
		interior (
			context.regionFor.keyword("{"),
			context.regionFor.keyword("}")
		)[indent]

		context.regionFor.keyword("{").append[newLine]
		context.regionFor.keyword("}").prepend[newLine]

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Attribute attribute : context.getAttributes()) {
			attribute.format;
		}
		for (Lookup lookup : context.getLookups()) {
			lookup.format;
		}
		for (Entity entity : context.getEntities()) {
			entity.format;
		}
	}
	
	def dispatch void format(Attribute attribute, extension IFormattableDocument document) {
		attribute.regionFor.keyword(";").append[newLine]
	}
	
	// TODO: implement for Attribute, AttributeType, Entity, Feature, FeatureTypeType, FeatureType, LookupInt, LookupString
}
